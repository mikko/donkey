# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class TrainCommandTrainingParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_name=None, tubs=None, augmentations=None):  # noqa: E501
        """TrainCommandTrainingParams - a model defined in OpenAPI

        :param model_name: The model_name of this TrainCommandTrainingParams.  # noqa: E501
        :type model_name: str
        :param tubs: The tubs of this TrainCommandTrainingParams.  # noqa: E501
        :type tubs: List[str]
        :param augmentations: The augmentations of this TrainCommandTrainingParams.  # noqa: E501
        :type augmentations: List[str]
        """
        self.openapi_types = {
            'model_name': str,
            'tubs': List[str],
            'augmentations': List[str]
        }

        self.attribute_map = {
            'model_name': 'modelName',
            'tubs': 'tubs',
            'augmentations': 'augmentations'
        }

        self._model_name = model_name
        self._tubs = tubs
        self._augmentations = augmentations

    @classmethod
    def from_dict(cls, dikt) -> 'TrainCommandTrainingParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TrainCommand_trainingParams of this TrainCommandTrainingParams.  # noqa: E501
        :rtype: TrainCommandTrainingParams
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_name(self):
        """Gets the model_name of this TrainCommandTrainingParams.


        :return: The model_name of this TrainCommandTrainingParams.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this TrainCommandTrainingParams.


        :param model_name: The model_name of this TrainCommandTrainingParams.
        :type model_name: str
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")  # noqa: E501

        self._model_name = model_name

    @property
    def tubs(self):
        """Gets the tubs of this TrainCommandTrainingParams.


        :return: The tubs of this TrainCommandTrainingParams.
        :rtype: List[str]
        """
        return self._tubs

    @tubs.setter
    def tubs(self, tubs):
        """Sets the tubs of this TrainCommandTrainingParams.


        :param tubs: The tubs of this TrainCommandTrainingParams.
        :type tubs: List[str]
        """
        if tubs is None:
            raise ValueError("Invalid value for `tubs`, must not be `None`")  # noqa: E501

        self._tubs = tubs

    @property
    def augmentations(self):
        """Gets the augmentations of this TrainCommandTrainingParams.


        :return: The augmentations of this TrainCommandTrainingParams.
        :rtype: List[str]
        """
        return self._augmentations

    @augmentations.setter
    def augmentations(self, augmentations):
        """Sets the augmentations of this TrainCommandTrainingParams.


        :param augmentations: The augmentations of this TrainCommandTrainingParams.
        :type augmentations: List[str]
        """
        if augmentations is None:
            raise ValueError("Invalid value for `augmentations`, must not be `None`")  # noqa: E501

        self._augmentations = augmentations
