# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.train_command_training_params import TrainCommandTrainingParams
from openapi_server import util

from openapi_server.models.train_command_training_params import TrainCommandTrainingParams  # noqa: E501


class TrainCommand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command=None, training_params=None):  # noqa: E501
        """TrainCommand - a model defined in OpenAPI

        :param command: The command of this TrainCommand.  # noqa: E501
        :type command: str
        :param training_params: The training_params of this TrainCommand.  # noqa: E501
        :type training_params: TrainCommandTrainingParams
        """
        self.openapi_types = {
            'command': str,
            'training_params': TrainCommandTrainingParams
        }

        self.attribute_map = {
            'command': 'command',
            'training_params': 'trainingParams'
        }

        self._command = command
        self._training_params = training_params

    @classmethod
    def from_dict(cls, dikt) -> 'TrainCommand':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TrainCommand of this TrainCommand.  # noqa: E501
        :rtype: TrainCommand
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command(self):
        """Gets the command of this TrainCommand.


        :return: The command of this TrainCommand.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this TrainCommand.


        :param command: The command of this TrainCommand.
        :type command: str
        """
        allowed_values = ["start", "stop"]  # noqa: E501
        if command not in allowed_values:
            raise ValueError(
                "Invalid value for `command` ({0}), must be one of {1}"
                .format(command, allowed_values)
            )

        self._command = command

    @property
    def training_params(self):
        """Gets the training_params of this TrainCommand.


        :return: The training_params of this TrainCommand.
        :rtype: TrainCommandTrainingParams
        """
        return self._training_params

    @training_params.setter
    def training_params(self, training_params):
        """Sets the training_params of this TrainCommand.


        :param training_params: The training_params of this TrainCommand.
        :type training_params: TrainCommandTrainingParams
        """

        self._training_params = training_params
