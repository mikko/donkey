# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Tub(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, timestamp=None, num_data_points=None):  # noqa: E501
        """Tub - a model defined in OpenAPI

        :param id: The id of this Tub.  # noqa: E501
        :type id: str
        :param name: The name of this Tub.  # noqa: E501
        :type name: str
        :param timestamp: The timestamp of this Tub.  # noqa: E501
        :type timestamp: datetime
        :param num_data_points: The num_data_points of this Tub.  # noqa: E501
        :type num_data_points: float
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'timestamp': datetime,
            'num_data_points': float
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'timestamp': 'timestamp',
            'num_data_points': 'numDataPoints'
        }

        self._id = id
        self._name = name
        self._timestamp = timestamp
        self._num_data_points = num_data_points

    @classmethod
    def from_dict(cls, dikt) -> 'Tub':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tub of this Tub.  # noqa: E501
        :rtype: Tub
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Tub.


        :return: The id of this Tub.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tub.


        :param id: The id of this Tub.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Tub.


        :return: The name of this Tub.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tub.


        :param name: The name of this Tub.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def timestamp(self):
        """Gets the timestamp of this Tub.


        :return: The timestamp of this Tub.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Tub.


        :param timestamp: The timestamp of this Tub.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def num_data_points(self):
        """Gets the num_data_points of this Tub.


        :return: The num_data_points of this Tub.
        :rtype: float
        """
        return self._num_data_points

    @num_data_points.setter
    def num_data_points(self, num_data_points):
        """Sets the num_data_points of this Tub.


        :param num_data_points: The num_data_points of this Tub.
        :type num_data_points: float
        """
        if num_data_points is None:
            raise ValueError("Invalid value for `num_data_points`, must not be `None`")  # noqa: E501

        self._num_data_points = num_data_points
