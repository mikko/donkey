# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class TubDataPoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp=None, angle=None, throttle=None, image_name=None):  # noqa: E501
        """TubDataPoint - a model defined in OpenAPI

        :param timestamp: The timestamp of this TubDataPoint.  # noqa: E501
        :type timestamp: datetime
        :param angle: The angle of this TubDataPoint.  # noqa: E501
        :type angle: float
        :param throttle: The throttle of this TubDataPoint.  # noqa: E501
        :type throttle: float
        :param image_name: The image_name of this TubDataPoint.  # noqa: E501
        :type image_name: str
        """
        self.openapi_types = {
            'timestamp': datetime,
            'angle': float,
            'throttle': float,
            'image_name': str
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'angle': 'angle',
            'throttle': 'throttle',
            'image_name': 'imageName'
        }

        self._timestamp = timestamp
        self._angle = angle
        self._throttle = throttle
        self._image_name = image_name

    @classmethod
    def from_dict(cls, dikt) -> 'TubDataPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TubDataPoint of this TubDataPoint.  # noqa: E501
        :rtype: TubDataPoint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this TubDataPoint.


        :return: The timestamp of this TubDataPoint.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TubDataPoint.


        :param timestamp: The timestamp of this TubDataPoint.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def angle(self):
        """Gets the angle of this TubDataPoint.


        :return: The angle of this TubDataPoint.
        :rtype: float
        """
        return self._angle

    @angle.setter
    def angle(self, angle):
        """Sets the angle of this TubDataPoint.


        :param angle: The angle of this TubDataPoint.
        :type angle: float
        """
        if angle is None:
            raise ValueError("Invalid value for `angle`, must not be `None`")  # noqa: E501

        self._angle = angle

    @property
    def throttle(self):
        """Gets the throttle of this TubDataPoint.


        :return: The throttle of this TubDataPoint.
        :rtype: float
        """
        return self._throttle

    @throttle.setter
    def throttle(self, throttle):
        """Sets the throttle of this TubDataPoint.


        :param throttle: The throttle of this TubDataPoint.
        :type throttle: float
        """
        if throttle is None:
            raise ValueError("Invalid value for `throttle`, must not be `None`")  # noqa: E501

        self._throttle = throttle

    @property
    def image_name(self):
        """Gets the image_name of this TubDataPoint.


        :return: The image_name of this TubDataPoint.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this TubDataPoint.


        :param image_name: The image_name of this TubDataPoint.
        :type image_name: str
        """
        if image_name is None:
            raise ValueError("Invalid value for `image_name`, must not be `None`")  # noqa: E501

        self._image_name = image_name
