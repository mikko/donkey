// tslint:disable
/**
 * Markku portal API
 * This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: markku@futurice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Tub,
    TubFromJSON,
    TubToJSON,
} from '../models';

export interface GetTubByCarAndIdRequest {
    carId: string;
    tubId: string;
}

export interface GetTubsByCarRequest {
    carId: string;
}

/**
 * no description
 */
export class TubApi extends runtime.BaseAPI {

    /**
     * Returns a single tub for a car
     */
    async getTubByCarAndIdRaw(requestParameters: GetTubByCarAndIdRequest): Promise<runtime.ApiResponse<Tub>> {
        if (requestParameters.carId === null || requestParameters.carId === undefined) {
            throw new runtime.RequiredError('carId','Required parameter requestParameters.carId was null or undefined when calling getTubByCarAndId.');
        }

        if (requestParameters.tubId === null || requestParameters.tubId === undefined) {
            throw new runtime.RequiredError('tubId','Required parameter requestParameters.tubId was null or undefined when calling getTubByCarAndId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/car/{carId}/tub/{tubId}`.replace(`{${"carId"}}`, encodeURIComponent(String(requestParameters.carId))).replace(`{${"tubId"}}`, encodeURIComponent(String(requestParameters.tubId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TubFromJSON(jsonValue));
    }

    /**
     * Returns a single tub for a car
     */
    async getTubByCarAndId(requestParameters: GetTubByCarAndIdRequest): Promise<Tub> {
        const response = await this.getTubByCarAndIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all tubs for a car
     */
    async getTubsByCarRaw(requestParameters: GetTubsByCarRequest): Promise<runtime.ApiResponse<Array<Tub>>> {
        if (requestParameters.carId === null || requestParameters.carId === undefined) {
            throw new runtime.RequiredError('carId','Required parameter requestParameters.carId was null or undefined when calling getTubsByCar.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/car/{carId}/tub`.replace(`{${"carId"}}`, encodeURIComponent(String(requestParameters.carId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TubFromJSON));
    }

    /**
     * Returns all tubs for a car
     */
    async getTubsByCar(requestParameters: GetTubsByCarRequest): Promise<Array<Tub>> {
        const response = await this.getTubsByCarRaw(requestParameters);
        return await response.value();
    }

}
