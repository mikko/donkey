// tslint:disable
/**
 * Markku portal API
 * This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: markku@futurice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Car,
    CarFromJSON,
    CarToJSON,
} from '../models';

export interface GetCarByIdRequest {
    carId: string;
}

/**
 * no description
 */
export class CarApi extends runtime.BaseAPI {

    /**
     * Returns a single car
     * Find car by ID
     */
    async getCarByIdRaw(requestParameters: GetCarByIdRequest): Promise<runtime.ApiResponse<Car>> {
        if (requestParameters.carId === null || requestParameters.carId === undefined) {
            throw new runtime.RequiredError('carId','Required parameter requestParameters.carId was null or undefined when calling getCarById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/car/{carId}`.replace(`{${"carId"}}`, encodeURIComponent(String(requestParameters.carId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CarFromJSON(jsonValue));
    }

    /**
     * Returns a single car
     * Find car by ID
     */
    async getCarById(requestParameters: GetCarByIdRequest): Promise<Car> {
        const response = await this.getCarByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * List all cars
     */
    async getCarsRaw(): Promise<runtime.ApiResponse<Array<Car>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/car`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CarFromJSON));
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * List all cars
     */
    async getCars(): Promise<Array<Car>> {
        const response = await this.getCarsRaw();
        return await response.value();
    }

}
