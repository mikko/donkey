// tslint:disable
/**
 * Markku portal API
 * This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: markku@futurice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TubDataPoint,
    TubDataPointFromJSON,
    TubDataPointToJSON,
} from '../models';

export interface GetImageByCarAndTubAndIdRequest {
    carId: string;
    tubId: string;
    imageId: string;
}

export interface GetTubDataPointByCarAndIdRequest {
    carId: string;
    tubId: string;
    dataId: string;
}

export interface GetTubDataPointsRequest {
    carId: string;
    tubId: string;
}

/**
 * no description
 */
export class TubDataApi extends runtime.BaseAPI {

    /**
     * Returns an image for single datapoint
     */
    async getImageByCarAndTubAndIdRaw(requestParameters: GetImageByCarAndTubAndIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.carId === null || requestParameters.carId === undefined) {
            throw new runtime.RequiredError('carId','Required parameter requestParameters.carId was null or undefined when calling getImageByCarAndTubAndId.');
        }

        if (requestParameters.tubId === null || requestParameters.tubId === undefined) {
            throw new runtime.RequiredError('tubId','Required parameter requestParameters.tubId was null or undefined when calling getImageByCarAndTubAndId.');
        }

        if (requestParameters.imageId === null || requestParameters.imageId === undefined) {
            throw new runtime.RequiredError('imageId','Required parameter requestParameters.imageId was null or undefined when calling getImageByCarAndTubAndId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/car/{carId}/tub/{tubId}/image/{imageId}`.replace(`{${"carId"}}`, encodeURIComponent(String(requestParameters.carId))).replace(`{${"tubId"}}`, encodeURIComponent(String(requestParameters.tubId))).replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters.imageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns an image for single datapoint
     */
    async getImageByCarAndTubAndId(requestParameters: GetImageByCarAndTubAndIdRequest): Promise<void> {
        await this.getImageByCarAndTubAndIdRaw(requestParameters);
    }

    /**
     * Returns a single data point in a tub
     */
    async getTubDataPointByCarAndIdRaw(requestParameters: GetTubDataPointByCarAndIdRequest): Promise<runtime.ApiResponse<TubDataPoint>> {
        if (requestParameters.carId === null || requestParameters.carId === undefined) {
            throw new runtime.RequiredError('carId','Required parameter requestParameters.carId was null or undefined when calling getTubDataPointByCarAndId.');
        }

        if (requestParameters.tubId === null || requestParameters.tubId === undefined) {
            throw new runtime.RequiredError('tubId','Required parameter requestParameters.tubId was null or undefined when calling getTubDataPointByCarAndId.');
        }

        if (requestParameters.dataId === null || requestParameters.dataId === undefined) {
            throw new runtime.RequiredError('dataId','Required parameter requestParameters.dataId was null or undefined when calling getTubDataPointByCarAndId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/car/{carId}/tub/{tubId}/data/{dataId}`.replace(`{${"carId"}}`, encodeURIComponent(String(requestParameters.carId))).replace(`{${"tubId"}}`, encodeURIComponent(String(requestParameters.tubId))).replace(`{${"dataId"}}`, encodeURIComponent(String(requestParameters.dataId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TubDataPointFromJSON(jsonValue));
    }

    /**
     * Returns a single data point in a tub
     */
    async getTubDataPointByCarAndId(requestParameters: GetTubDataPointByCarAndIdRequest): Promise<TubDataPoint> {
        const response = await this.getTubDataPointByCarAndIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all data points in a tub
     */
    async getTubDataPointsRaw(requestParameters: GetTubDataPointsRequest): Promise<runtime.ApiResponse<Array<TubDataPoint>>> {
        if (requestParameters.carId === null || requestParameters.carId === undefined) {
            throw new runtime.RequiredError('carId','Required parameter requestParameters.carId was null or undefined when calling getTubDataPoints.');
        }

        if (requestParameters.tubId === null || requestParameters.tubId === undefined) {
            throw new runtime.RequiredError('tubId','Required parameter requestParameters.tubId was null or undefined when calling getTubDataPoints.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/car/{carId}/tub/{tubId}/data`.replace(`{${"carId"}}`, encodeURIComponent(String(requestParameters.carId))).replace(`{${"tubId"}}`, encodeURIComponent(String(requestParameters.tubId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TubDataPointFromJSON));
    }

    /**
     * Returns all data points in a tub
     */
    async getTubDataPoints(requestParameters: GetTubDataPointsRequest): Promise<Array<TubDataPoint>> {
        const response = await this.getTubDataPointsRaw(requestParameters);
        return await response.value();
    }

}
