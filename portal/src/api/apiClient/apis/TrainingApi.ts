// tslint:disable
/**
 * Markku portal API
 * This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: markku@futurice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  TrainingInfo,
  TrainingInfoFromJSON,
  TrainingInfoToJSON,
  StartCommand,
  StopCommand,
  StartCommandToJSON,
  StopCommandToJSON
} from "../models";

export interface GetTrainingInfoByCarIdRequest {
  carId: string;
}

export interface HandleTrainingRequest {
  carId: string;
  command: StartCommand | StopCommand;
}

/**
 * no description
 */
export class TrainingApi extends runtime.BaseAPI {
  /**
   * Returns information about current training session
   */
  async getTrainingInfoByCarIdRaw(
    requestParameters: GetTrainingInfoByCarIdRequest
  ): Promise<runtime.ApiResponse<TrainingInfo>> {
    if (
      requestParameters.carId === null ||
      requestParameters.carId === undefined
    ) {
      throw new runtime.RequiredError(
        "carId",
        "Required parameter requestParameters.carId was null or undefined when calling getTrainingInfoByCarId."
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/car/{carId}/training`.replace(
        `{${"carId"}}`,
        encodeURIComponent(String(requestParameters.carId))
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    });

    return new runtime.JSONApiResponse(response, jsonValue =>
      TrainingInfoFromJSON(jsonValue)
    );
  }

  /**
   * Returns information about current training session
   */
  async getTrainingInfoByCarId(
    requestParameters: GetTrainingInfoByCarIdRequest
  ): Promise<TrainingInfo> {
    const response = await this.getTrainingInfoByCarIdRaw(requestParameters);
    return await response.value();
  }

  /**
   * Change car's training session
   */
  async handleTrainingRaw(
    requestParameters: HandleTrainingRequest
  ): Promise<runtime.ApiResponse<TrainingInfo>> {
    if (
      requestParameters.carId === null ||
      requestParameters.carId === undefined
    ) {
      throw new runtime.RequiredError(
        "carId",
        "Required parameter requestParameters.carId was null or undefined when calling handleTraining."
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let body;
    if (requestParameters.command.command === "start") {
      body = StartCommandToJSON(requestParameters.command);
    } else if (requestParameters.command.command === "stop") {
      body = StopCommandToJSON(requestParameters.command);
    } else {
      throw new runtime.RequiredError("command", "Invalind command.");
    }

    const response = await this.request({
      path: `/car/{carId}/training`.replace(
        `{${"carId"}}`,
        encodeURIComponent(String(requestParameters.carId))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body
    });

    return new runtime.JSONApiResponse(response, jsonValue =>
      TrainingInfoFromJSON(jsonValue)
    );
  }

  /**
   * Change car's training session
   */
  async handleTraining(
    requestParameters: HandleTrainingRequest
  ): Promise<TrainingInfo> {
    const response = await this.handleTrainingRaw(requestParameters);
    return await response.value();
  }
}
