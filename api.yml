openapi: 3.0.2
info:
  description: "API for managing autonomous cars"
  version: 1.0.0
  title: Markku portal API
  termsOfService: http://swagger.io/terms/
  contact:
    email: markku@futurice.com
  license:
    name: MIT
    url: https://mit-license.org/
tags:
  - name: car
    description: Access to cars
  - name: tub
    description: Access to tubs
  - name: tub data
    description: Access to tub data
  - name: training
    description: Handle training sessions
paths:
  /car:
    get:
      tags:
        - car
      summary: List all cars
      description: Multiple status values can be provided with comma separated strings
      operationId: getCars
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Car"
  "/car/{carId}":
    get:
      tags:
        - car
      summary: Find car by ID
      description: Returns a single car
      operationId: getCarById
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
        "400":
          description: Invalid ID supplied
        "404":
          description: Car not found
  "/car/{carId}/tub":
    get:
      tags:
        - tub
      summary: Returns all tubs for a car
      operationId: getTubsByCar
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tub"
        "400":
          description: Invalid ID supplied
        "404":
          description: Car not found
  "/car/{carId}/tub/{tubId}":
    get:
      tags:
        - tub
      summary: Returns a single tub for a car
      operationId: getTubByCarAndId
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          schema:
            type: string
        - name: tubId
          in: path
          description: ID of tub to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tub"
        "400":
          description: Invalid car or tub ID supplied
        "404":
          description: Car or tub not found
  "/car/{carId}/tub/{tubId}/data":
    get:
      tags:
        - tub data
      summary: Returns all data points in a tub
      operationId: getTubDataPoints
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          schema:
            type: string
        - name: tubId
          in: path
          description: ID of tub to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TubDataPoint"
        "400":
          description: Invalid car or tub ID supplied
        "404":
          description: Car or tub not found
  "/car/{carId}/tub/{tubId}/data/{dataId}":
    get:
      tags:
        - tub data
      summary: Returns a single data point in a tub
      operationId: getTubDataPointByCarAndId
      parameters:
        - name: carId
          in: path
          description: ID of car
          required: true
          schema:
            type: string
        - name: tubId
          in: path
          description: ID of tub
          required: true
          schema:
            type: string
        - name: dataId
          in: path
          description: ID of data point to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TubDataPoint"
        "400":
          description: Invalid car or tub ID supplied
        "404":
          description: Car or tub not found
  "/car/{carId}/tub/{tubId}/image/{imageId}":
    get:
      tags:
        - tub data
      summary: Returns an image for single datapoint
      operationId: getImageByCarAndTubAndId
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          schema:
            type: string
        - name: tubId
          in: path
          description: ID of tub to return
          required: true
          schema:
            type: string
        - name: imageId
          in: path
          description: ID of image to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            image/*:
              schema:
                type: string
                format: binary
        "400":
          description: Invalid car or tub ID supplied
        "404":
          description: Car or tub not found
  "/car/{carId}/training":
    get:
      tags:
        - training
      summary: Returns information about current training session
      operationId: getTrainingInfoByCarId
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingInfo"
        "400":
          description: Invalid car ID supplied
        "404":
          description: Car not found
    post:
      tags:
        - training
      summary: Change car's training session
      operationId: handleTraining
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: "#/components/schemas/StartCommand"
                - $ref: "#/components/schemas/StopCommand"
        description: Command to send
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingInfo"
        "400":
          description: Invalid parameters supplied
        "404":
          description: Car not found
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080/
components:
  schemas:
    Car:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
    Tub:
      type: object
      required:
        - id
        - name
        - timestamp
        - numDataPoints
      properties:
        id:
          type: string
        name:
          type: string
        timestamp:
          type: string
          format: date-time
        numDataPoints:
          type: number
    TubDataPoint:
      type: object
      required:
        - timestamp
        - angle
        - throttle
        - imageName
      properties:
        timestamp:
          type: string
          format: date-time
        angle:
          type: number
        throttle:
          type: number
        imageName:
          type: string
    TrainingInfo:
      type: object
      required:
        - status
      properties:
        status:
          type: string
    StartCommand:
      type: object
      required:
        - command
        - trainingParams
      properties:
        command:
          type: string
          enum: ["start"]
        trainingParams:
          type: object
          properties:
            modelName:
              type: string
            tubs:
              type: array
              items:
                type: string
            augmentations:
              type: array
              items:
                type: string
          required:
            - modelName
            - tubs
            - augmentations
    StopCommand:
      type: object
      required:
        - command
      properties:
        command:
          type: string
          enum: ["stop"]
